using AoMEngineLibrary.Graphics.Brg;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Numerics;
using Xunit;
using Xunit.Abstractions;

namespace AoMEngineLibrary.Tests.Graphics.Brg;

public class BrgDummyCollectionTests
{
    public record DummyCollectionTest(BrgDummyCollection Collection, ushort MeshVersion, byte[] Data);

    public static readonly IEnumerable<object[]> Tests = new List<object[]>
        {
            new[] {
                new DummyCollectionTest(new BrgDummyCollection()
                    {
                        new BrgDummy() { Type = BrgDummyType.Chin},
                        new BrgDummy() { Type = BrgDummyType.HitPointBar, Up = new Vector3(1), Forward = new Vector3(2), Right = new Vector3(3), Position = new Vector3(4) }
                    },
                    22,
                    new byte[]
                    {
                            0x02,0x00,0x1C,0x00,0x01,0x00,0x00,0x00,0x80,0x3F,0x00,0x00,0x80,0x3F,0x80,0x3F,
                            0x80,0x3F,0x00,0x00,0x00,0x00,0x80,0xBF,0x00,0x40,0x00,0x40,0x00,0x40,0x80,0xBF,
                            0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x80,0x40,0x80,0x40,0x80,0x40,0x80,0xBE,0x80,0xBE,0x80,0xBE,0x80,0xBE,0x80,0xBE,
                            0x80,0xBE,0x80,0x3E,0x80,0x3E,0x80,0x3E,0x80,0x3E,0x80,0x3E,0x80,0x3E,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
                    }
                )
            }
        };

    private readonly ITestOutputHelper _output;

    public BrgDummyCollectionTests(ITestOutputHelper output)
    {
        _output = output;
    }

    [Theory]
    [MemberData(nameof(Tests))]
    public void Read_Works(DummyCollectionTest test)
    {
        using (var ms = new MemoryStream())
        using (var reader = new BrgBinaryReader(ms))
        {
            ms.Write(test.Data, 0, test.Data.Length);
            ms.Flush();
            ms.Seek(0, SeekOrigin.Begin);

            var result = new BrgDummyCollection();
            result.Read(reader, test.MeshVersion, 0, 0);

            Assert.Equal(test.Collection.Version, result.Version);
            Assert.Equal(test.Collection.Count, result.Count);

            foreach (var (expected, actual) in test.Collection.Zip(result))
            {
                Assert.Equal(expected.Type, actual.Type);
                Assert.Equal(expected.Name, actual.Name);
                Assert.Equal(expected.Up, actual.Up);
                Assert.Equal(expected.Forward, actual.Forward);
                Assert.Equal(expected.Right, actual.Right);
                Assert.Equal(expected.Position, actual.Position);
                Assert.Equal(expected.BoundingBoxMin, actual.BoundingBoxMin);
                Assert.Equal(expected.BoundingBoxMax, actual.BoundingBoxMax);
            }
        }
    }

    [Theory]
    [MemberData(nameof(Tests))]
    public void Write_Works(DummyCollectionTest test)
    {
        using (var ms = new MemoryStream())
        using (var writer = new BrgBinaryWriter(ms))
        {
            test.Collection.Write(writer, test.MeshVersion);
            writer.Flush();
            var bytes = ms.ToArray();

            Assert.Equal(test.Data, bytes);
        }
    }
}
