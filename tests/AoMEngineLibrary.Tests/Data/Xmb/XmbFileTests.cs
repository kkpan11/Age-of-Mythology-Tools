using AoMEngineLibrary.Data.XmbFile;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Xml.Linq;
using Xunit;
using Xunit.Abstractions;

namespace AoMEngineLibrary.Tests.Data.Xmb;

public class XmbFileTests
{
    public record FileTest(XDocument File, byte[] Data, bool ReadTestOnly, CompressionLevel CompressionLevel);

    public static readonly IEnumerable<object[]> Tests;

    static XmbFileTests()
    {
        Tests = new[]
        {
            new object[] { Create1() },
            new object[] { Create2() }
        };

        static FileTest Create1()
        {
            var file = new XDocument(
                new XElement("Root",
                    new XElement("A", "va", new XAttribute("aA", "vaa")),
                    new XElement("A", "va2", new XAttribute("aA2", "vaa2")),
                    new XElement("B", "vb", new XAttribute("aB", "vab"))));
            var data = new byte[]
            {
                0x58,0x31,0xE6,0x00,0x00,0x00,0x58,0x52,0x04,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
                0x03,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x52,0x00,0x6F,0x00,0x6F,0x00,0x74,0x00,
                0x01,0x00,0x00,0x00,0x41,0x00,0x01,0x00,0x00,0x00,0x42,0x00,0x03,0x00,0x00,0x00,
                0x02,0x00,0x00,0x00,0x61,0x00,0x41,0x00,0x03,0x00,0x00,0x00,0x61,0x00,0x41,0x00,
                0x32,0x00,0x02,0x00,0x00,0x00,0x61,0x00,0x42,0x00,0x58,0x4E,0x9C,0x00,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x03,0x00,0x00,0x00,0x58,0x4E,0x26,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x76,0x00,
                0x61,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
                0x00,0x00,0x03,0x00,0x00,0x00,0x76,0x00,0x61,0x00,0x61,0x00,0x00,0x00,0x00,0x00,
                0x58,0x4E,0x2A,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x76,0x00,0x61,0x00,0x32,0x00,
                0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
                0x04,0x00,0x00,0x00,0x76,0x00,0x61,0x00,0x61,0x00,0x32,0x00,0x00,0x00,0x00,0x00,
                0x58,0x4E,0x26,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x76,0x00,0x62,0x00,0x02,0x00,
                0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03,0x00,
                0x00,0x00,0x76,0x00,0x61,0x00,0x62,0x00,0x00,0x00,0x00,0x00,
            };
            return new FileTest(file, data, false, CompressionLevel.NoCompression);
        }
        static FileTest Create2()
        {
            var file = new XDocument(
                new XElement("Root",
                    new XElement("A", "va", new XAttribute("aA", "vaa")),
                    new XElement("A", "va", new XAttribute("aA", "vaa")),
                    new XElement("B", "vb", new XAttribute("aB", "vab"), new XAttribute("aB2", "vab2"))));
            var data = new byte[]
            {
                0x6C,0x33,0x33,0x74,0xF8,0x00,0x00,0x00,0x78,0xDA,0x8B,0x30,0xFC,0xC4,0xC0,0xC0,
                0x10,0x11,0xC4,0x02,0x24,0x39,0x80,0x98,0x19,0x88,0x41,0xEC,0x20,0x86,0x7C,0x20,
                0x2C,0x61,0x60,0x04,0xB2,0x1D,0xC1,0xA4,0x13,0x58,0x8E,0x09,0x88,0x13,0x81,0x22,
                0x10,0x1A,0x22,0x06,0xA2,0x8D,0x18,0x22,0xFC,0x56,0x30,0x20,0x00,0x23,0x94,0x06,
                0xC9,0x47,0xF8,0xA9,0x41,0x75,0x96,0x01,0xD5,0x32,0x42,0x65,0x91,0x55,0x80,0xC4,
                0x13,0xC1,0x3C,0xD2,0xD4,0x9A,0xC1,0xD5,0x26,0x81,0x69,0x46,0x28,0x9F,0x11,0x49,
                0x2D,0x44,0x86,0x05,0xCE,0x33,0x02,0xEB,0x05,0x00,0x5E,0x7A,0x12,0x07,
            };
            return new FileTest(file, data, false, CompressionLevel.SmallestSize);
        }
    }

    private readonly ITestOutputHelper _output;

    public XmbFileTests(ITestOutputHelper output)
    {
        _output = output;
    }

    [Theory]
    [MemberData(nameof(Tests))]
    public void Read_Works(FileTest test)
    {
        using (var ms = new MemoryStream())
        {
            ms.Write(test.Data, 0, test.Data.Length);
            ms.Flush();
            ms.Seek(0, SeekOrigin.Begin);

            var result = XmbFile.Load(ms);
            var expFile = test.File;

            AssertXElementEqual(expFile.Root, result.Root);
        }

        static void AssertXElementEqual(XElement? expected, XElement? actual)
        {
            if (expected is null || actual is null)
            {
                Assert.Null(expected);
                Assert.Null(actual);
                return;
            }

            Assert.Equal(expected.Name, actual.Name);
            Assert.Equal(expected.Value, actual.Value);

            Assert.Equal(expected.Attributes().Count(), actual.Attributes().Count());
            foreach (var (expAttr, actAttr) in expected.Attributes().Zip(actual.Attributes()))
            {
                Assert.Equal(expAttr.Name.LocalName, actAttr.Name.LocalName);
                Assert.Equal(expAttr.Value, actAttr.Value);
            }

            Assert.Equal(expected.Elements().Count(), actual.Elements().Count());
            foreach (var (expChild, actChild) in expected.Elements().Zip(actual.Elements()))
            {
                AssertXElementEqual(expChild, actChild);
            }
        }
    }

    [Theory]
    [MemberData(nameof(Tests))]
    public void Write_Works(FileTest test)
    {
        if (test.ReadTestOnly)
            return;

        using (var ms = new MemoryStream())
        {
            XmbFile.Save(test.File, ms, test.CompressionLevel);
            ms.Flush();
            var bytes = ms.ToArray();
            
            Assert.Equal(test.Data, bytes);
        }
    }
}
