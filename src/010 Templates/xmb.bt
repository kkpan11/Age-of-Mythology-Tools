//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:        xmb.bt
// Author:      Petar Tasev
// Revision:    1.0
// Purpose:     Outline decompressed xmb file
//--------------------------------------
LittleEndian();
SetBackColor(cLtGray);

struct {
    ushort magic;
    int fileLength;
    ushort magic2;
    int magic2dataSize;
    ulong version;

    if (version >= 2)
    {
        int numDefinitions;
        struct XmlNodeDefinition {
            int nameLength <bgcolor=cGreen>;
            wchar_t name[nameLength] <bgcolor=cLtRed>;
        } definition[numDefinitions] <bgcolor=cLtBlue,read=definitionName,optimize=false>;
    }

    if (version >= 3)
    {
        int numAttrDefinitions;
        struct XmlNodeDefinition attrDefinition[numAttrDefinitions] <bgcolor=cLtBlue,read=definitionName,optimize=false>;
    }

    struct XmlNode {
        ushort tag;
        int length <bgcolor=cGreen>;

        int valueLength <bgcolor=cGreen>;
        wchar_t value[valueLength] <bgcolor=cLtRed>;

        if (version == 0)
        {
            int nameLength <bgcolor=cGreen>;
            wchar_t name[nameLength] <bgcolor=cLtRed>;
        }
        else if (version >= 1)
        {
            int nameId;
        }

        // Not sure about this block
        if (version == 0)
        {
            int unknown;
        }

        if (version >= 8)
        {
            int lineNumber;
        }

        int attributeCount <bgcolor=cGreen>;
        if (attributeCount > 0)
        {
            struct XmlAttributeNode {
                if (version == 0)
                {
                    int nameLength <bgcolor=cGreen>;
                    wchar_t name[nameLength] <bgcolor=cLtRed>;
                }
                else
                {
                    int nameId;
                }
                int valueLength <bgcolor=cGreen>;
                wchar_t value[valueLength] <bgcolor=cLtRed>;
            } attributes[attributeCount] <bgcolor=cLtBlue,read=definitionAttributeNode,optimize=false>;
        }

        int childNodeCount;
        if (childNodeCount > 0)
        {
            struct XmlNode childNodes[childNodeCount] <bgcolor=cLtBlue,read=definitionNodeName,optimize=false>;
        }
        
    } rootNode <bgcolor=cLtBlue,read=definitionNodeName,optimize=false>;
} file;

wstring definitionName(const XmlNodeDefinition &def)
{
    if (def.nameLength > 0)
        return def.name;
    else
        return "";
}

wstring definitionNodeName(const XmlNode &node)
{
    wstring s = "";
    if (file.version == 0)
    {
        if (node.nameLength > 0)
            s += node.name;
    }
    else if (file.version >= 1)
    {
        if (node.nameId != -1 && file.definition[node.nameId].nameLength > 0)
            s += file.definition[node.nameId].name;
    }

    if (node.valueLength > 0)
        s += " = " + node.value;
    return s;
}

wstring definitionAttributeNode(const XmlAttributeNode &node) {
    local int i;
    wstring s = "";
    if (file.version == 0)
    {
        if (node.nameLength > 0)
            s += node.name;
    }
    else
    {
        if (node.nameId != -1 && file.attrDefinition[node.nameId].nameLength > 0)
            s += file.attrDefinition[node.nameId].name;
    }

    if (node.valueLength > 0)
        s += " = " + node.value;
    return s;
}