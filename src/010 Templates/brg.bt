//--------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
// File:    brg.bt
// Author:  Petar Tasev
// Revision:1.0
// Purpose: Highlight brg files from AoM game.
//--------------------------------------
LittleEndian();

typedef uint16 hfloat <read=h2floatRead>;

string h2floatRead( const hfloat &v )
{
   byte currData[2];
   ConvertDataToBytes(v, currData);

   byte data[4];
   data[0] = 0;
   data[1] = 0;
   data[2] = currData[0];
   data[3] = currData[1];
   float  fValue;
   fValue = ConvertBytesToFloat(data);
   
   string s;
   SPrintf( s, "%f", fValue );
   return s;
}
string hfloatRead( const hfloat &v )
{
   uint32 dataValue;
   float  fValue;
   
   dataValue = 0;
   
   if (v & 0x7C00)
   {
      dataValue = ((v & 0x7C00) + 0x1C000) << 13;
   }
   
   dataValue |= ((v & 0x8000) << 16) | ((v & 0x03FF) << 13);
   
   string s;
   SPrintf( s, "%x", dataValue );
   SScanf( s, "%x", fValue );
   SPrintf( s, "%f", fValue );
   return s;
}

typedef enum <uint16> {
    ANIMVERTCOLORALPHA  = 0x0001, // animated vertex color alpha
    TEXCOORDSA          = 0x0002, // Mesh has first set of tex coords
    MULTTEXCOORDS       = 0x0004, // mesh has texture coords sets 2..n
    ANIMATEDMESH        = 0x0008, // Deprecated - Not used after revision 0x0008
    RESERVED            = 0x0010, // ?
    COLORCHANNEL        = 0x0020, // Mesh has a vertex color channel
    MATERIAL            = 0x0040, // Mesh has material data
    BUMPMAPINFO         = 0x0080, // Mesh has bump/normal map info
    ATTACHPOINTS        = 0x0100, // Mesh contains dummy objects
    NOZBUFFER           = 0x0200, // mesh should not be rendered with z-testing
    SECONDARYMESH       = 0x0400, // Secondary Mesh 2..n
    ANIMTEXCOORDS       = 0x0800, // Mesh contains animated tex coords
    PARTICLESYSTEM      = 0x1000, // Mesh is a Particle System
    PARTICLEPOINTS      = 0x2000, // Mesh vertices are treated as particle points with radii
    COLORALPHACHANNEL   = 0x4000, // Vertex color channel is treated as alpha channel
    ANIMVERTCOLORSNAP   = 0x8000 // Animated vertex colors snap between keyframes
} MeshFlags <read=readMeshFlags>; // Core Flags A

typedef enum <uint16> {
    BILLBOARD           = 0x0001, // rotates with the player view
    ANIMTEXCOORDSNAP    = 0x0002, // Animated UV/animated texture coords snap between keyframes
    HASFACENORMALS      = 0x0004, // has face normals
    ANIMATED            = 0x0008, // animation length included in extended header
    KEYFRAMESNAP        = 0x0010, // keyframe snap, not smooth
    NOLOOPANIMATE       = 0x0020, // don't animate Last-First frame
    MFRESRVED0          = 0x0040, // ?
    BONEANIM            = 0x0080, // ?
    FACEGROUPMAP        = 0x0100, // Mesh has face group list
    STRIPPED            = 0x0200  // Mesh data is stripped
} MeshFormat; // Core Flags B

typedef enum <byte> {
    KEYFRAME    = 0x0000, // keyframe based animation
    NONUNIFORM  = 0x0001, // Non-uniform animation
    SKINBONE    = 0x0002 // Skinned Animation
} MeshAnimType; // BRG Animation Type

string readMeshFlags (local MeshFlags &flags)
{
	local string s = "";
	local int commaNeeded = 0;
	local MeshFlags i = 1;

	SPrintf (s, "%x: ", flags);
	while (i < ANIMVERTCOLORSNAP) 
	{
        //Printf("'%u'?", i);
		if (flags & i)
		{
			if (commaNeeded) 
			{ s += ", "; }
			s +=  EnumToString(i);
			commaNeeded = 1;
		}
		i = i << 1;
	}
	return s;
}
int meHasFlag(MeshFlags &flags, MeshFlags flag)
{
    return (flags & flag) == flag;
}

typedef struct
{
    hfloat x; hfloat y;
} Vec2h <read=Str("(%s, %s)",h2floatRead(this.x),h2floatRead(this.y))>;
typedef struct
{
    hfloat x; hfloat y; hfloat z;
} Vec3h <read=Str("(%s, %s, %s)",h2floatRead(this.x),h2floatRead(this.y),h2floatRead(this.z))>;

typedef struct
{
    int16 x; int16 y; int16 z;
} Vec3s <read=Str("(%d, %d, %d)",this.x,this.y,this.z)>;

typedef struct
{
    float x; float y;
} Vec2f <read=Str("(%f, %f)",this.x,this.y)>;
typedef struct
{
    float x; float y; float z;
} Vec3f <read=Str("(%f, %f, %f)",this.x,this.y,this.z)>;

typedef struct (int16 extendedHeaderSize)
{
    int16 numIndex0 <comment="Unused">; // same as values in attachpoints, could be unused now
    int16 numMatrix0 <comment="Unused">; // same as values in attachpoints, could be unused
    int16 nameLength; // ?? unknown091 (still need to figure out)
    if (extendedHeaderSize > 6)
    {
        int16 pointMaterial; // ??
        float pointRadius <comment="Always 0">; // unknown09Unused always 0
    }
    if (extendedHeaderSize > 12)
    {
        byte materialCount;
        byte shadowNameLength0;
        byte shadowNameLength1;
        byte shadowNameLength2;
    }
    if (extendedHeaderSize > 16)
    {
        float animTime <comment="this is what really matters for the animation length of the model">;
    }
    if (extendedHeaderSize > 20)
    {
        int materialLibraryTimestamp <comment="Always 191738312, 1032824281 for TT">; // always the same value, one for aom, one for tt models, unknown09const
    }
    if (extendedHeaderSize > 24)
    {
        float reserved;
    }
    if (extendedHeaderSize > 28)
    {
        float exportedScaleFactor <comment="Used as an FYI about exporter setting">;
    }
    if (extendedHeaderSize > 32)
    {
        int nonUniformKeyCount; //09c
    }
    if (extendedHeaderSize > 36)
    {
        int uniqueMaterialCount; // how many materials are used in a mesh, could be byte, with 3 padding afterwards
    }
} MeshCoreHeader3;

typedef struct (uint16 oldNumDummyObjects, uint16 oldNumDummyEntry)
{
    local uint16 numDummyObjects = oldNumDummyObjects;
    local uint16 numDummyEntry = oldNumDummyEntry;
    if (version >= 19)
    {
        struct DummyObjectHeader
        {
            uint16 numDummyObjects <comment="This is number of dummies">;
            uint16 numDummyEntry;
            byte version <comment="Always 1">;
            byte unused;
        } dummyObjectHeader;
        numDummyObjects = dummyObjectHeader.numDummyObjects;
        numDummyEntry = dummyObjectHeader.numDummyEntry;
    }

    if (version >= 22 && dummyObjectHeader.version == 1)
    {
        Vec3h upVector[numDummyObjects];
        Vec3h fwdVector[numDummyObjects];
        Vec3h rightVector[numDummyObjects];
        Vec3h position[numDummyObjects];
        Vec3h boundingBoxMina[numDummyObjects];
        Vec3h boundingBoxMaxa[numDummyObjects];
    }
    else
    {
        Vec3f upVector[numDummyObjects];
        Vec3f fwdVector[numDummyObjects];
        if (version >= 19) // 19, 20, 21
        {
            Vec3f rightVector[numDummyObjects];
        }
        Vec3f position[numDummyObjects];
        Vec3f boundingBoxMina[numDummyObjects];
        Vec3f boundingBoxMaxa[numDummyObjects];
    }

    struct DummyLookupEntry
    {
        byte dummyCount;
        byte padding[3];
        int dummyIndicesArrayPtr;
    } dummyList[numDummyEntry] <optimize=true>;

    local int32 i = 0;
    local int32 numPoints = 0;
    for (i = 0; i < numDummyEntry; i++)
    {
        numPoints += dummyList[i].dummyCount;
    }
    //unknown12

    byte pointIndex[numPoints]; //unknown13
} DummyObject;

typedef struct (uint16 count)
{
    struct UserData
    {
        uint32 strLen;
        uint32 dataType <comment="3 seems to be float">;
        switch (dataType)
        {
            case 1:
                uint32 dataLen;
                char name[strLen];
                char data[dataLen];
                break;
            case 3:
                float data;
                char name[strLen];
                break;
            default:
                uint32 data;
                char name[strLen];
                break;
        }
    } userData[count] <optimize=false>;
} UserDataList;

typedef struct
{
    //uint16 data;
    ubyte r;
    ubyte g;
} CompressedNormal <read=readCompressedNormal>;
string readCompressedNormal (const CompressedNormal &n)
{
	local string s = "";

    // this isn't right. Can't figure out compression
    local float x = (n.r / 255.0f) * 2.0f - 1.0f;
    local float y = (n.g / 255.0f) * 2.0f - 1.0f;
    local float z = 1.0f - (x*x + y*y);
    z = Sqrt(clamp(z, 0.0f, 1.0f));

    /*local float x = ((n.data & 0x05) / 31.0f) * 2.0f - 1.0f;
    local float y = (((n.data >> 5) & 0x06) / 63.0f) * 2.0f - 1.0f;
    local float z = (((n.data >> 11) & 0x05) / 31.0f) * 2.0f - 1.0f;*/

    local float totalLength = Sqrt(x*x + y*y + z*z);
    local float nx = x / totalLength;
    local float ny = y / totalLength;
    local float nz = z / totalLength;

	SPrintf (s, "(%f, %f, %f)", nx, ny, nz);
	return s;
}
float clamp(float f, float min, float max)
{
    if (f < min) return min;
    else if (f > max) return max;
    else return f;
}

{ // Begin Parsing Data
    struct HEADER
    {
        char magic[4];
        int unknown01;
        int numMaterials;
        int unknown02;
        int numMeshes;
        int space;
        byte revision;
        byte padding[3]; //unknown03
    } header;

    char tempMagic[4];
    FSeek(FTell() - 4);
    if (header.numMeshes > 1 || tempMagic == "ASET")
    {
        struct
        {
            char asetHead[4];
            int numFrames;
            float frameStep;
            float animTime <comment="Time required to complete loop of all frames">;
            float frequency;
            float spf;
            float fps;
            int space;
        } asetHeader;
    }

    struct Mesh
    {
        char meshHead[4];
        int16 version; // always 22
        MeshFormat meshFormat; // Mesh Core Flags B
        int16 numVertices;
        int16 numFaces;
        byte interpolationType;
        MeshAnimType animationType; // specialProp
        uint16 userDataEntryCount;
        Vec3f objectCenter;
        float centerRadius <comment="Could be longest axis length of boundingBoxMax">; // unknown03
        Vec3f massPos <comment="Always 0">; // always 0 for all 3
        Vec3f hotspotPos;
        int16 extendedHeaderSize <comment="Always 40">; // always 40 (unknown04)
        MeshFlags properties; // Mesh Core Flags A
        Vec3f boundingBoxMin;
        Vec3f boundingBoxMax;

        if (((properties & PARTICLEPOINTS) == PARTICLEPOINTS))
        {
            // Completely different reader for particle points
            MeshCoreHeader3 extendedHeader(extendedHeaderSize);
            Vec3f vertices[numVertices];
            if (((properties & PARTICLESYSTEM) == PARTICLESYSTEM))
            {
                float particleRadius[numVertices];
            }

            UserDataList userData(userDataEntryCount);

            local int hasDummies = extendedHeader.numMatrix0 > 0;
            if ((properties & ATTACHPOINTS) == ATTACHPOINTS || hasDummies)
            {
                DummyObject dummyObject(extendedHeader.numMatrix0, extendedHeader.numIndex0);
            }

            return;
        }

        if (version == 22)
        {
            Vec3h vertices[numVertices];
            Vec3h normals[numVertices];
        }
        else
        {
            Vec3f vertices[numVertices];
            if (version >= 13 && version <= 17)
            {
                CompressedNormal normals[numVertices] <comment="this isn't right. Can't figure out compression">;
            }
            else
            {
                Vec3f normals[numVertices];
            }
        }

        if ((!((properties & SECONDARYMESH) == SECONDARYMESH) ||
            ((properties & ANIMTEXCOORDS) == ANIMTEXCOORDS) ||
            ((properties & PARTICLESYSTEM) == PARTICLESYSTEM)) &&
            ((properties & TEXCOORDSA) == TEXCOORDSA))
        {
            if (version == 22)
            {
                Vec2h texVert[numVertices];
            }
            else
            {
                Vec2f texVert[numVertices];
            }
        }

        if ((!((properties & SECONDARYMESH) == SECONDARYMESH) &&
            ((properties & MATERIAL) == MATERIAL)) ||
            ((properties & PARTICLESYSTEM) == PARTICLESYSTEM))
        {
            int16 faceMat[numFaces];
            Vec3s faceVert[numFaces];
            int16 vertMat[numVertices];
        }

        UserDataList userData(userDataEntryCount);

        MeshCoreHeader3 extendedHeader(extendedHeaderSize);

        if (version == 13)
        {
            char objectName[extendedHeader.nameLength];
        }

        local int hasDummies = extendedHeader.numMatrix0 > 0;
        if ((properties & ATTACHPOINTS) == ATTACHPOINTS || hasDummies)
        {
            DummyObject dummyObject(extendedHeader.numMatrix0, extendedHeader.numIndex0);
        }

        if ((((properties & COLORALPHACHANNEL) == COLORALPHACHANNEL || (properties & COLORCHANNEL) == COLORCHANNEL) && !((properties & SECONDARYMESH) == SECONDARYMESH)) || (properties & ANIMVERTCOLORALPHA) == ANIMVERTCOLORALPHA)
        {
            struct VertColor {
                ubyte B;
                ubyte G;
                ubyte R;
                ubyte A;
            } vertexColor[numVertices];
        }

        if (version >= 14 && version <= 19)
        {
            Vec3f maybeFaceNormals[numFaces]; // ???
        }

        // this block happens only on first frames, with variable anim set in specialProps
        if (animationType == NONUNIFORM && extendedHeader.nonUniformKeyCount)
        {
            float variableSpeed[extendedHeader.nonUniformKeyCount] <comment="mesh[x].StartTime = animTime * varSpeed[x]">;
        }

        if (version >= 16 && version < 22)
        {
            char shadowName0[extendedHeader.shadowNameLength0];
            char shadowName1[extendedHeader.shadowNameLength1];
        }
    } item[header.numMeshes] <optimize=false>;

    if ((item[0].properties & MATERIAL) == MATERIAL)
    {
        struct Material 
        {
            char mtrlHead[4];
            int id;
            struct BrgMatFlagField 
            {
                uint HasTexture : 1;
                uint Updateable : 1;
                uint UseColors : 1;
                uint Specular : 1;
                uint WrapUTx1 : 1;
                uint WrapVTx1 : 1;
                uint WrapUTx2 : 1;
                uint WrapVTx2 : 1;
                uint WrapUTx3 : 1;
                uint WrapVTx3 : 1;
                uint TwoSided : 1;
                uint PlayerXFormColor1 : 1;
                uint PlayerXFormColor2 : 1;
                uint PlayerXFormTx1 : 1;
                uint PlayerXFormTx2 : 1;
                uint BumpMap : 1;
                uint Reserved : 1;
                uint SpecularExponent : 1;
                uint PixelXForm1 : 1;
                uint PixelXForm2 : 1;
                uint FaceMap : 1;
                uint AdditiveBlend : 1;
                uint SubtractiveBlend : 1;
                uint Alpha : 1;
                uint PlayerXFormColor3 : 1;
                uint PixelXForm3 : 1;
                uint CubeMapInfo : 1;
                uint InverseAlpha : 1;
                uint AdditiveCubeBlend : 1;
            } flags;
            float reserved;
            int nameLength;
            Vec3f ambient; //unknown02 [36 bytes]
            Vec3f diffuse;
            Vec3f specular;
            Vec3f emissive; //unknown03 [12 bytes]
    
            char name[nameLength];
            if (flags.BumpMap == 1)
            {
                int nameLength2;
                char name2[nameLength2];
            }

            if (flags.SpecularExponent == 1)
            {
                float specularLevel;
            }

            if (flags.Alpha == 1)
            {
                float alpha; //unknown04
            }

            if (flags.CubeMapInfo == 1)
            {
                struct CubeMapInfo
                {
                    byte mode <comment="Always 0">; // always 1
                    byte txFactor <comment="Always 30, 40 for TT">; // always 30/40 for tt
                    byte cubeMapNameLength;
                    byte textureMapNameLength;
                    if (cubeMapNameLength > 0) char cubeMapName[cubeMapNameLength];
                    if (textureMapNameLength > 0) char textureMapName[textureMapNameLength];
                } cubeMapInfo;
            }
        } material[header.numMaterials] <optimize=false>;
    }
}